{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Dotenv is a library that allows software developers to conceal their sensitive data within their code by keeping it in a .env file. This tool can be used for Database connections, API authentication, Security, and making your code more secure and reliable.</p> <p>In this documentation, you will learn how to secure and protect your web applications to prevent any attackers attempting to steal user information or break your web application.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<ul> <li>Intermediate level developers who need to protect the sensitive data in the server.</li> <li>Software development teams working on web-applications that need data security.</li> </ul>"},{"location":"#user-specification","title":"User Specification","text":"<p>Users that want to follow this guide must be proficient in the following:</p> <ul> <li><code>Express using Typescript or Javascript</code> - Must be proficient in creating and understanding express routes to develop websites.</li> <li><code>Authentication</code> - Must be comfortable developing authentication features including hashing a user's password and cookie-session.</li> <li><code>Github Repository terms and conditions</code> - Must know what code GitHub tolerates to prevent getting repositories flagged and taken down.</li> <li><code>using .gitignore</code> - Knowledge of hiding certain files from the git repository using a .gitignore file.</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<p>Before proceeding, ensure you have the following installed:</p> <ul> <li> <p>TypeScript v5.x or later</p> </li> <li> <p>JavaScript ES6 or later</p> </li> <li> <p>Visual Studio Code</p> </li> <li> <p>DotEnv v16.x or later</p> </li> <li> <p>Express.js version 4.18.12 or later</p> </li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<ul> <li>Dotenv Configuration</li> <li>Hiding your server PORT</li> <li>Hiding Secret Keys</li> <li>Using .gitignore</li> </ul>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>Throughout the documentation, we will use message blocks to alert you to relevant information. Each possible message block, from most important to least important:</p> <p>Info</p> <p>Indicates additional information or tips.</p> <p>Success</p> <p>Indicates what success looks like.</p> <p>Warning</p> <p>Specifies content that must be read before proceeding.</p> <p>Danger</p> <p>Specifies actions that may cause an error or will cause the application to crash.</p>"},{"location":"Dotenv-Configuration/","title":"Configuration and Setup","text":""},{"location":"Dotenv-Configuration/#overview","title":"Overview","text":"<p>In this section, you will learn how to configure dotenv to your express application. This is the foundation for all enviroment variable management in your future projects as it will allow you to safely share your code with others, or on GitHub.</p>"},{"location":"Dotenv-Configuration/#configuration-steps-for-dotenv-setup","title":"Configuration steps for Dotenv setup","text":"<ol> <li> <p>Open up your selected project and make sure you are in its directory</p> inside your terminal<pre><code>cd &lt;your project directory&gt;\n</code></pre> </li> <li> <p>Create a .env at the root of your project directory.</p> <ul> <li>Placing your .env file at the root directory ensures that other developers can quickly access and use the environment variables</li> </ul> <p>Warning</p> <p>Never commit your .env file to GitHub, preventing this will be covered in a later section. For now, create a .env.example to ensure that developers will know what environment variables is needed for the project without compromising your data (.env.example will be committed).</p> <p></p> </li> <li> <p>Import Dotenv into all the scripts that have data that needs to be hidden</p> <ul> <li> <p>Since this guide is using Typescript, use the import type statements , this way you obtain the type information for the module.</p> </li> <li> <p>Call the configuration function to read the contents of your .env file which parses its contents, making it available to all scripts or files that include the import.</p> </li> </ul> example.ts<pre><code>// Typescript notation:\nimport dotenv from \"dotenv\"\ndotenv.config();\n</code></pre> example.js<pre><code>// JavaScript notation:\nconst dotenv = require(\"dotenv\").config();\n</code></pre> </li> </ol>"},{"location":"Dotenv-Configuration/#the-location-of-the-variables","title":"The location of the variables","text":"<ul> <li> <p>When you call the configuration   function in your Javascript/Typescript file(s), all the variables that you stored in your .env file will assigned inside an object called process.env</p> </li> <li> <p>This will load your environment variables from .env into your project's root directory</p> </li> <li> <p>In the next task, you will learn how to access your environment variables using the process.env object</p> </li> </ul>"},{"location":"Dotenv-Configuration/#inserting-data-into-env","title":"Inserting data into .env","text":"<p>Once you created your .env file(s), you can insert your variables following the syntax below:</p> <ul> <li>In your .env file:</li> </ul> .env<pre><code> YOUR_ENVIRONMENT_VARIABLE=\"&lt;insert data here&gt;\"\n</code></pre> <p>Info</p> <p>When naming your environment variables, make sure that you are replacing all your whitespaces with underscores ( _ ) and the name is all upper case. This is that you can differinciate between variables in your code and your .env file</p>"},{"location":"Dotenv-Configuration/#conclusion","title":"Conclusion","text":"<p>By this point, you have learned:</p> <ul> <li>How to import your .env file into your code</li> <li>The location of your environment variables</li> <li>Insert your data into your .env file</li> </ul>"},{"location":"gitignore/","title":"Using .gitignore","text":""},{"location":"gitignore/#overview","title":"Overview","text":"<p>In this section, you will know how to use <code>.gitignore</code> to securely hide all the environment variables for sensitive information that being store in <code>.env</code> file before committed to version control (e.g Git).</p>"},{"location":"gitignore/#how-to-use","title":"How to use","text":"<p>The <code>.gitignore</code> file is to recognize and tell Git what files and directories to ignore while staging and pushing, in order to ensure that your <code>.env</code> never committed, you need to add it to <code>.gitignore</code>.</p>"},{"location":"gitignore/#step-by-step","title":"Step by step","text":"<ul> <li>If you don't already have one, creating a <code>.gitignore</code> file in your project's directory.</li> <li>Open the file and adding manually into it to ignore the <code>.env</code> file:</li> </ul> .gitignore<pre><code>.env\n</code></pre> <ul> <li>Or you can open your bash terminal and type:</li> </ul> bash<pre><code>echo \".env\" &gt;&gt; .gitignore\n</code></pre> <p>Warning</p> <p>Navigate to your project's directory before typing command in the terminal</p>"},{"location":"gitignore/#conclusion","title":"Conclusion","text":"<ul> <li>In conclusion, using <code>.gitignore</code> to ensure that all your environment variables you set in your <code>.env</code> file for the project is ignored when staging and pushing to version control.</li> <li>This helps all the sensitive datas such as port values or other configuration values will be hidden when deploying to different environments or teams.</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"Term Definition Authentication The validation of a person/objects identity. Server PORT A designated end point for incoming network connections (Like a home adddress). Database An electronic location that stores a collection of data. Web-Application A website that has the features of a software application GitHub A website that lets developers collaborate and share projects. Typescript A Transpiled Language and an extended version of JavaScript that allows data to be statically typed. Express.js A JavaScript frame work that reduces the workload of handling routes between web-pages. Secret Key Cryptographic information used to either encrypt or decrypt confidential data. Root Directory The parent folder that contains all files related to your project Commit Saving the changes that were made into your code Variables A name which is able to hold data. Whitespace A space between words"},{"location":"port/","title":"Port security","text":""},{"location":"port/#overview","title":"Overview","text":"<p>In this section, you will learn how to use <code>.env</code> files and variables to protect and prevent the port value from cyber attacks.</p>"},{"location":"port/#issue","title":"Issue:","text":"<p>When deploying to different environment and teams, it's essential for maintaining security and flexibility or else everybody include strangers(e.g hackers and intruders) can access the server through the leaked port.</p> <p>Bad example of port security:</p> bad-example.ts<pre><code>const app = express();\n\nconst PORT: number = 3000;\n\napp.set(\"view engine\", \"ejs\");\n\napp.get(\"/\", (req, res) =&gt; {\n  res.render(\"index.ejs\");\n});\n</code></pre>"},{"location":"port/#how-to-access-environment-variables-for-port","title":"How to access environment variables for port","text":"<p>The <code>.env</code> file can store your application's sensitive datas such as the port number in environment variables.</p> <p>Example of <code>.env</code> file:</p> example.env<pre><code>PORT=3000\n</code></pre>"},{"location":"port/#using-dotenv-in-javascript","title":"Using <code>dotenv</code> in JavaScript:","text":"<p>In JavaScript, you'll use <code>require()</code> to load and parses the dotenv module, and then access environment variables by using <code>process.env</code></p> <p>Example of JavaScript:</p> dotenv.js<pre><code>require(\"dotenv\").config();\n\nconst port = process.env.PORT || 5000;\n\nconsole.log(`Server is running on port: ${port}`);\n</code></pre> <p>Explainations:</p> <ul> <li><code>require('dotenv').config()</code> loads and parses the .env file.</li> <li><code>process.env.PORT</code> retrieves the value of the PORT variable. If PORT is not defined in the .env file, it will default to <code>5000</code></li> </ul>"},{"location":"port/#using-dotenv-in-typescript","title":"Using <code>dotenv</code> in TypeScript:","text":"<p>In TypeScript, you will need to import the dotenv module using <code>import</code> and also define the types as <code>string</code> for <code>process.env</code> to not get error when type-checking.</p> <p>Example of TypeScript:</p> dotenv.ts<pre><code>import dotenv from \"dotenv\";\ndotenv.config();\n\nconst port: string = process.env.PORT || \"5000\";\n\nconsole.log(`Server is running on port: ${port}`);\n</code></pre> <p>Explainations:</p> <ul> <li><code>import dotenv from \"dotenv\";</code>, and <code>dotenv.config();</code> allows you to import and configure the dotenv library in TypeScript.</li> <li>The environment variable <code>process.env.PORT</code> will be a string, so you can assign it directly to a string variable.</li> </ul> <p>In addition, In TypeScript, you can enhance type safety by creating a custom interface for process.env. This ensures that TypeScript knows about the specific environment variables you are using.</p> <p>Example of Adding Type Safety:</p> type-safety.ts<pre><code>import dotenv from \"dotenv\";\ndotenv.config();\n\ninterface ProcessEnv {\n  PORT: string;\n}\n\nconst port: string = (process.env as ProcessEnv).PORT || \"5000\";\n\nconsole.log(`Server is running on port: ${port}`);\n</code></pre> <p>Explainations:</p> <ul> <li>The <code>ProcessEnv</code> interface defines the specific environment variables that will be used in the application.</li> <li>By casting <code>process.env</code> to <code>ProcessEnv</code>, TypeScript will know about the PORT variable, ensuring type safety.</li> </ul>"},{"location":"port/#conclusion","title":"Conclusion","text":"<ul> <li> <p>By using the <code>dotenv</code> library, you can securely manage sensitive data like port values without hardcoding them into your application code. This practice is essential for maintaining security and flexibility, especially when deploying to different environments or teams.</p> </li> <li> <p>Whether you are working in JavaScript or TypeScript, dotenv provides a simple and efficient way to keep environment variables in a .env file, which can be easily loaded and used in your application.</p> </li> </ul>"},{"location":"secrets/","title":"Hiding Secrets","text":""},{"location":"secrets/#overview","title":"Overview","text":"<p>In this section, authentication for hiding Secrets for sessions and password hashing will be covered. This allows for users that are logged into a web-application, to be kept safe from any hackers and unauthorized users.</p> <p>Hiding these keys are vital to keeping your user's information safe. It isolates key factors (variables) that are used to decrypt/uncode/reveal a user's data from your code base.</p>"},{"location":"secrets/#session-secrets","title":"Session Secrets","text":"<p>When making sessions for users using the npm library cookie-session, you must make sure to hide the values of the cookies, as any attacker can use that value and infilitrate the user's data.</p> <p>Observe the cookie-session middleware below:</p> <p></p> <p>This code is a simple snippet of the cookie-session library containing hard-coded values into the cookie-session's name and key.</p> <p>Warning</p> <p>This is dangerous since attackers can use these values to impersonate or take over user accounts as the secrets are visible to anybody in the codebase.</p>"},{"location":"secrets/#hiding-session-secrets","title":"Hiding Session Secrets","text":"<ol> <li>Insert your values into the .env file by assigning them variables.</li> </ol> .env<pre><code>SESSION_NAME_SECRET=\"whoami\"\nSESSION_KEY_SECRET=\"ILHTonTOP\"\n</code></pre> <p>Note</p> <p>Remember to follow .env variable naming conventions, you may also want to make your secrets complex by making a long secret, adding special characters, and using uppercase/lowercase letters. This increases the time it takes for brute force attacks to succeed.</p> <ol> <li>Apply your environment variables into your session options object.</li> </ol> index.ts<pre><code>import cookieSession from \"cookie-session\"\n\napp.use(cookieSession({\n   name: process.env.SESSION_NAME_SECRET\n   keys: [process.env.SESSION_KEY_SECRET]\n}));\n</code></pre> <p>Congratulations, you have secured your cookie-sessions</p>"},{"location":"secrets/#bcrypt-salt-rounds","title":"Bcrypt Salt Rounds","text":"<p>User passwords using bcrypt on your web applications are hashed to prevent attackers from seeing passwords in plain text.</p> <p>This is applied by giving your salt rounds a number value. </p> <p>The vulnerable data here is the salt rounds as the number 24 can be used to evaluate the strength of your hashing process, significantly reducing the time it takes for a hacker to take over your data.</p>"},{"location":"secrets/#hiding-your-salt-rounds","title":"Hiding your salt rounds","text":"<p>The following steps will walk you through securing your salt rounds.</p> <ol> <li> <p>In your .env file, add a variable named BCRYPT_SALT_ROUNDS</p> .env<pre><code>BCRYPT_SALT_ROUNDS=&lt;insert the # of salt rounds here&gt;\n</code></pre> </li> <li> <p>Just like accessing your cookie-session environment variables, replace your salt round values with process.env.BCRYPT_SALT_ROUNDS index.ts<pre><code>const hashRegisteredPassword = async (password: string): Promise&lt;string&gt; =&gt; {\n    const hashedPassword: Promise&lt;string&gt; = await bcrypt.hash(password, process.env.BCRYPT_SALT_ROUNDS);\n    return hashedPassword;\n}\n</code></pre> index.js<pre><code>    const hashRegisteredPassword = async (password) =&gt; {\n        const hashedPassword = await bcrypt.hash(password, process.env.BCRYPT_SALT_ROUNDS);\n        return hashedPassword;\n    }\n</code></pre>     You have now secured your user's passwords!</p> </li> </ol>"},{"location":"secrets/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you have learned:</p> <ul> <li>Vulnerabilities in your session and bcrypt libraries.</li> <li>The outcome of unconcealed authentication data.</li> <li>How to hide your authentication data.</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#overview","title":"Overview","text":"<p>This section will show you how to debug and resolve any problems/issues that you meet when you implement the codes.</p>"},{"location":"troubleshooting/#step-by-step-guide","title":"Step by step guide","text":""},{"location":"troubleshooting/#check-format-and-syntax-of-the-env-file","title":"Check format and syntax of the <code>.env</code> file","text":"<p>Ensure your <code>.env</code> file format correctly. It should not be any spaces before/after the keys or values.</p> <p>Example of correct format:</p> good-format.env<pre><code>API_KEY=your-api-key\nDB_HOST=localhost\nDB_PORT=5432\n</code></pre> <p>Common mistakes:</p> <ul> <li>Spaces before or after the <code>=</code>sign.</li> <li>Missing <code>=</code> for key-value pairs.</li> <li>Non-ASCII characters or special characters that might cause issues.</li> </ul>"},{"location":"troubleshooting/#verify-if-the-dotenv-module-required-correctly","title":"Verify if the <code>dotenv</code> module required correctly","text":"<p>Ensure that you need to require <code>dotenv</code> module at the very top of your javascript before you implement any other code.</p> <p>Example of Javascript:</p> example.js<pre><code>const process = require(\"dotenv\").config();\n\nconst port = process.env.PORT || 5000;\n</code></pre> <p>Output if you have the name in <code>js</code> and <code>.env</code> don't match:</p> <p></p> <p>In addition, your values in <code>javascript</code> file should be matched with ones in the <code>.env</code> file. For instance, if your .env file has <code>API_KEY=your-api-key</code>, ensure that your code accesses it as <code>process.env.API_KEY</code>, not something like <code>process.env.VALUE</code></p>"},{"location":"troubleshooting/#logging-the-error-in-console","title":"Logging the error in console","text":"<p>Try <code>console.log()</code> the values to see if they are loaded and parsed to the javascript file correctly.</p> console.js<pre><code>console.log(process.env.PORT);\n</code></pre> <p>Explanations:</p> <ul> <li>If the output give you <code>undefined</code>, this means you not parse the values correctly. Check the <code>.env</code> file or all the syntax/formats in your javascript file.</li> </ul>"},{"location":"troubleshooting/#validate-environment-variables-by-error-handler","title":"Validate environment variables by error handler","text":"<p>Validate that the environment variables are defined properly. For instance, before trying to use a variable, you can check if it's defined</p> <p>Example of Javascript:</p> validate.js<pre><code>if (!process.env.PORT) {\n  console.error(\"PORT is not defined in .env file\");\n}\n</code></pre> <p>Output of your console:</p> <p></p>"},{"location":"troubleshooting/#use-dotenv-debug-mode","title":"Use <code>dotenv</code> debug mode","text":"<p>If you want to know how your <code>dotenv</code> module work. You can enable the debug mode by putting <code>debug: true</code> in <code>config()</code></p> <p>Example of JavaScript:</p> debug.js<pre><code>require(\"dotenv\").config({ debug: true });\n</code></pre> <p>Output of your console if you turn on the debug mode:</p> <p></p> <p>Explaination:</p> <ul> <li>This will log to the console information about the .env file being loaded and any errors encountered.</li> </ul>"},{"location":"troubleshooting/#check-compatibility-with-other-libraries","title":"Check compatibility with other libraries","text":"<p>Some libraries or frameworks (e.g., webpack or Next.js) might have specific methods or considerations for loading environment variables, which may interfere with dotenv. Ensure you are following any framework-specific guidelines.</p>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Error: Cannot find module 'dotenv':</p> </li> <li> <p>Solution: Run <code>npm install dotenv</code> to ensure the library is installed.</p> </li> <li> <p>process.env.VARIABLE_NAME is undefined:</p> </li> <li> <p>Solution: Double-check that the key exists in the <code>.env</code> file and that it is being parsed correctly in your <code>javascript</code> file.</p> </li> <li> <p>Error: ENOENT: no such file or directory, open <code>.env</code>:</p> </li> <li> <p>Solution: Ensure that your <code>.env</code> file exists in the correct directory, and verify that dotenv.config() is pointing to the correct path for the <code>.env</code> file.</p> </li> <li> <p>Environment variable is not being loaded properly:</p> </li> <li> <p>Solution: Try logging the <code>process.env</code> object to verify the loaded environment variables, or use dotenv.config({ debug: true }) to gather more details about what might be failing.</p> </li> </ol>"},{"location":"troubleshooting/#addition-resources","title":"Addition resources","text":"<ul> <li>Dotenv Documentation</li> </ul>"}]}